
/** -------------------------------------------------------
 * Author: Chris Wetherell
 * Inline Preview ("Toggle")
 *
 * A series of functions that will toggle a simply styled 
 * preview of the post that could be generated by the form, if 
 * submitted.
 *
 * Warning: Written on the highways between L.A. and Tuscon.
 *
 * Warning: Updated on the highways between New Mexico and Texas.
 *
 * Typical usage:
 * On an HTML element: onclick="toggle();"
  ------------------------------------------------------- */


  /**
   * toggle()
   *
   * A series of functions that will toggle a simply styled
   * preview of the post that could be generated by the form, if
   * submitted.
   *
   * Typical usage:
   * On an HTML element: onclick="toggle();"
   */
  function toggle(e)
  { 
    if (!document.getElementById) {
      alert("This feature is not supported by your browser.");
      return;
    }
    if (RichEdit.PREVIEW_IS_HIDDEN) {
      showPreview();
    } else {
      hidePreview();      
    }
    
    togglePostOptions();
  }



  /**
   * PreviewElements()
   *
   * An object which stores the various elements needed to be adjusted to 
   * display a preview of the post.
   */
  var PreviewElements = function() {}
  
  function setPreviewElements() {
    
    PreviewElements.f = d(RichEdit.frameId);
    PreviewElements.t = getElement(Preview.TEXTAREA);
    PreviewElements.p = getElement("previewbody");
    PreviewElements.s = d("SubmitTwo");
    PreviewElements.k = d("key_commands");
    PreviewElements.ed = d("editarea");
    PreviewElements.title = d(Posting.TITLE);
    PreviewElements.address = d(Posting.URL);
    PreviewElements.h1 = dE(getElement(Preview.ID),"h1")[0];
    PreviewElements.b = (RichEdit.mode == RichEdit.DESIGN_MODE) ?
      d(Preview.PREVIEW_BUTTON) : d(Preview.HTML_PREVIEW_BUTTON); 
    
  }




  /**
   * showPreview()
   *
   * Displays a preview of the post and hides form elements.
   */
  function showPreview() {
    
    setPreviewElements();
    
    // get the post body
    var strBody; 
    if (RichEdit.mode == RichEdit.DESIGN_MODE) { 
      strBody = getDesignModeHtml();
      if (Detect.IE()) strBody = RemoveLinksWithinTags(strBody);
    }      
    if (RichEdit.mode == RichEdit.HTML_MODE) { 
      strBody = PreviewElements.t.value;
      
      // Safari bug - if textarea has focus and
      // then disappears subsequent key capture fails
      if (PreviewElements.t.style.display!="none" && Detect.SAFARI()) {
        PreviewElements.t.blur();
      }
    }
    
    // hide the edit area
    if (RichEdit.mode == RichEdit.DESIGN_MODE) {
      hideElement(PreviewElements.f);
    } else {
      hideElement(PreviewElements.t);
    }
    
    // change the preview label
    if (PreviewElements.b) PreviewElements.b.innerHTML = "Hide Preview";
    
    // ------------------------------------------
    // Transform the post body for inline viewing
    // ------------------------------------------
    
    // Replace text line breaks with HTML link breaks
    strBody = strBody.replace(/\n/g,"<br />");
    
    // Make images with relative links appear in Preview
    var blogURL = d("blogURL").value;
    strBody = strBody.replace(/<img src=\"\//g, 
                              "<img src=\"" + blogURL);
    
    // Make all preview links open in a new window
    var anchors = PreviewElements.p.getElementsByTagName('A');
    for (a = 0; a < anchors.length ; a++) {
      anchors[a].setAttribute('target', '_new');
    }
    
    // ------------------------------------------
    // Set the preview area
    // ------------------------------------------
    
    showElement(PreviewElements.p);
    hideElement(PreviewElements.k);
    
    // Add the post title, and if the URL field exists and
    // has content, then make the title a hyperlink.
    if (PreviewElements.title) { 
      if (PreviewElements.title.value.length > 0) {
        showElement(PreviewElements.h1);
      } else {
        hideElement(PreviewElements.h1);
      }
      setPreviewTitle(getTitle());
    }
    
    // Make extra save buttons at the bottom of large posts.
    if (strBody.length>1600) {
      PreviewElements.s.innerHTML = d('postButtons').innerHTML;
    } else {
      PreviewElements.s.innerHTML = '';
    }
    
    // Copy and paste the post text from the form to the preview area
    PreviewElements.p.innerHTML = strBody;
    
    // Clean-up post body if it came from the WYSIWYG iframe
    if (RichEdit.ENABLE_IFRAME) { 
      PreviewElements.p.innerHTML 
        = convertAllFontsToSpans(cleanHTML(PreviewElements.p.innerHTML));
    }
    
    setFormatBarElements('none');
    
    RichEdit.PREVIEW_IS_HIDDEN = false;
    
    // To restore the editing area via key commands, Moz needs the focus 
    // to be transferred from the invisible editor to a visible element
    if (Detect.MOZILLA()) PreviewElements.title.focus();
    
  }




  /**
   * hidePreview()
   *
   * Hides a preview of the post and displays the form elements.
   */
  function hidePreview() {
    
    setPreviewElements();
    
    // ------------------------------------------
    // Restore the editing area
    // ------------------------------------------
    
    if (RichEdit.mode == RichEdit.DESIGN_MODE) {
      showElement(PreviewElements.f);
    } else {
      showElement(PreviewElements.t);
    }
    showElement(PreviewElements.k);
    hideElement(PreviewElements.p);
    hideElement(PreviewElements.s);
    hideElement(PreviewElements.h1);
    
    setFormatBarElements('block');
    
    if (PreviewElements.b) PreviewElements.b.innerHTML = "Preview";
    
    RichEdit.PREVIEW_IS_HIDDEN = true;
    
    // Moz needs to be reminded to have the iframe editable after 
    // a display change is made
    if (RichEdit.ENABLE_IFRAME
        && RichEdit.mode == RichEdit.DESIGN_MODE) {
      RichEdit.frameDoc.designMode = "On";
    }    
  }




  /**
   * togglePostOptions()
   *
   * Shows (or hides) the post options bar.
   */
  function togglePostOptions() {
    toggleDisplay(d(Posting.OPTIONS));
  }




  /**
   * setFormatBarElements()
   *
   * Shows (or hides) the glyphs and icons with the formatting bar.
   */
  function setFormatBarElements(display) {
    var bar = RichEdit.formatbar;
    var bar_SPANs = dE(bar, 'span');
    for (x = 0; x < bar_SPANs.length; x++) {
      var span = bar_SPANs[x];
      if (span.id != Preview.PREVIEW_BUTTON) {
        span.style.display = display;
      }
    }
    var bar_SELECTs = dE(bar, 'select');
    for (x = 0; x < bar_SELECTs.length; x++) {
      bar_SELECTs[x].style.display = display;
    }
    var bar_DIVs = dE(bar, 'div');
    for (x = 0; x < bar_DIVs.length; x++) {
      var div = bar_DIVs[x];
      if (div.className != "clear") {
        div.style.display = display;
      }
    }
  }



  /**
   * setPreviewTitle()
   *
   * Sets the title text of the post's preview
   *
   * Typical usage:
   * setPreviewTitle(getTitle());
   */
  function setPreviewTitle(s)
  {
    try {
      var h1 = dE(d(Preview.ID),"h1")[0];
      if (h1.style.display=="block") {
        h1.innerHTML=s;
      }
    } catch(e) {}
  }


  /**
   * getTitle()
   *
   * Returns the value of the title field except in the
   * case where there's a non-empty URL field where this
   * instead returns the title value wrapped in a hyperlink.
   *
   * Typical usage:
   * setPreviewTitle(getTitle());
   */
  function getTitle()
  {

    var title = d(Posting.TITLE);
    var address = d(Posting.URL);

    if (title) {
      var sTitle = title.value;
      if (address  && address.value.length>0) {
        sTitle = "<a target=\"new\" href=\""
                  +address.value
                  +"\">"
                  +sTitle
                  +"</a>";
      }
    }

    return sTitle;
  }


